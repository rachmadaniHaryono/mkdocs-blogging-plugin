{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Setup","text":""},{"location":"#installation","title":"Installation","text":"<pre><code># macOS or Linux\npip3 install mkdocs-blogging-plugin\n\n# Windows\npip install mkdocs-blogging-plugin\n</code></pre>"},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>Only <code>material</code> theme is adapted by far</li> <li><code>navigation.instant</code> feature cannot be enabled if blog paging is on</li> </ul> <p>Pull requests are welcome to break these constraints.</p>"},{"location":"#usage","title":"Usage","text":"<p>Before setting up the plugin, set <code>site_url</code> to the url of your published site:</p> mkdocs.yml<pre><code>site_url: https://liang2kl.github.io/mkdocs-blogging-plugin/\n</code></pre>"},{"location":"#basic","title":"Basic","text":"<p>Add <code>blogging</code> in <code>plugins</code> and specify the directories to be included. This is the minimum configuration needed.</p> mkdocs.yml<pre><code>plugins:\n- blogging:\ndirs: # The directories to be included\n- blog\n</code></pre> <p>In the page you want to insert the blog content, add a line <code>{{ blog_content }}</code> into your desired place:</p> blog index page<pre><code># Blogs\n\n{{ blog_content }}\n</code></pre> <p>That's all. You can open the page where you insert <code>{{ blog_content }}</code> and see how it is working.</p>"},{"location":"#more-configurations","title":"More Configurations","text":"<p>Optionally, in your articles, add meta tags providing their titles and descriptions, which will be displayed on the blog page:</p> article<pre><code>---\ntitle: Lorem ipsum dolor sit amet\ndescription: Nullam urna elit, malesuada eget finibus ut, ac tortor.\n---\n</code></pre> <p>You can also set tags for all articles. First, turn on this feature in the configuration:</p> mkdocs.yml<pre><code>plugins:\n- blogging:\nfeatures:\ntags: {}\n</code></pre> <p>And in articles:</p> article<pre><code>---\ntags:\n  - mkdocs\n  - blogging\n---\n</code></pre> <p>For more detail, check Features - tags.</p> <p>Finally, to exclude certain pages from the blog collection, add a meta tag <code>exclude_from_blog</code> in the meta section of the markdown file:</p> article<pre><code>---\nexclude_from_blog: true\n---\n</code></pre>"},{"location":"#categories","title":"Categories","text":"<p>Some people might need to setup different blog page, serving different sets of articles (see this issue). For example, one might setup a page for technical articles, and another for life recording. Another example is a multi-language site, where we use different blog pages to display articles of different languages.</p> <p>The plugin supports generating different blog index pages based on a concept named category. A category is simply a group of directories used to generate a blog page. For example:</p> categories<pre><code>plugins:\n- blogging:\n# {{ blog_content }}\ndirs:\n- blogs\n\n# {{ blog_content review }}\ncategories:\n- name: review\ndirs:\n- review\n</code></pre> <p>We setup two categories here. The first one is the default category defining at the top level which includes the articles in <code>blogs</code>, and the second is a named category which includes the articles in <code>reviews</code>.</p> <p>Why there's a default category</p> <p>Versions before <code>v2.0</code> didn't support category-based settings, so we preserve the top-level configuration for backward compatibility.</p> <p>To generate a blog page for the default category:</p> index page for the default category<pre><code>{{ blog_content }}\n</code></pre> <p>To generate a blog page for a named category (in our case, <code>review</code>):</p> index page for category 'review'<pre><code>{{ blog_content review }}\n</code></pre>"},{"location":"#options","title":"Options","text":""},{"location":"#category-specific-settings","title":"Category-specific Settings","text":"<p>You can specify the included directories for each category and configure the options seperately. The category-specific settings include:</p> category settings<pre><code>dirs:              # The directories included in the category\n- reviews\n- ...\nsize: 5            # Number of articles in one page, default: 10\nsort: from: new        # Sort from new to old, default\n# or old         # Sort from old to new\nby: creation     # Sort by the first commit time, default\n# or revision    # Sort by the latest commit time\npaging: false      # Disable paging\nshow_total: false  # Remove 'total pages' label\nfull_content: true # Use the full content for blog description\ntemplate: blog-override.html # Path to customized template\ntheme:             # Use a predefined theme\nname: card\n</code></pre> <p>The structure for the configuration in <code>mkdocs.yml</code>:</p> mkdocs.yml<pre><code>plugins:\n- blogging:\ndirs:\n- blogs\nsize: 5\n...\n\ncategories:\n- name: review\ndirs:\n- review\nsize: 10\n...\n</code></pre> <p>For more about themes and custom templates, see Themes and Template respectively.</p>"},{"location":"#global-settings","title":"Global Settings","text":"<p>Aside from the category settings, there are some globally applied options, which should be defined at the top level of the plugin configuration:</p> mkdocs.yml<pre><code>features:          # Additional features\ntags:\n...\nlocale: en         # The locale for time localizations, default: system's locale\ntime_format: '%Y-%m-%d %H:%M:%S' # The format used to display the time\nmeta_time_format: '%Y-%m-%d %H:%M:%S' # The format used to parse the time from meta\n</code></pre> <p>Of all the options mentioned above, these deserve special attention:</p> <ul> <li> <p><code>time_format</code> in global settings is used to change the display style of the time, with higher priority than <code>locale</code>. </p> </li> <li> <p><code>meta_time_format</code> in global settings is used to tell the plugin how to parse the given time string from the meta. </p> </li> <li> <p>When <code>meta_time_format</code> is set, for all posts with a <code>time</code> or <code>date</code> metadata, the plugin will   use this format to parse the time, and replace the timestamp from git logs. This is   useful to alter specific posts' time if git commit time is not accurate or desired.   See the list of datetime placeholders for reference.</p> <p>Please make sure that the time is wrapped by quotes (issue #48). Otherwise, native YAML date and time literals will always be used if present in the file metadata, regardless of this setting. For example:</p> <pre><code>time: 2023-4-13 00:48               # without quotes\ntime: !!timestamp \"2023-4-13 00:48\" # provide the `timestamp` tag\n</code></pre> </li> <li> <p>When <code>paging</code> in category settings is set to <code>false</code>, if <code>size</code> is not set, all posts will be displayed on the first page; otherwise the first <code>size</code> posts will be displayed and the rest will not.</p> </li> </ul>"},{"location":"#publish-with-github-pages","title":"Publish with Github Pages","text":"<p>A few more steps need to be taken for hosting with Github Pages:</p> <p>Set <code>fetch-depth</code> to <code>0</code> when checking out with <code>actions/checkout</code></p> github action<pre><code>- uses: actions/checkout@v2\nwith:\nfetch-depth: 0\n</code></pre> <p>Creation and revision time for articles rely on git logs, so a complete respository is required. If it is not set, the plugin will take the build time as fallback.</p> <p>Configure your locale in the plugin's configuration</p> article<pre><code>plugins:\n- blogging:\nlocale: zh_CN\n</code></pre> <p>Otherwise, the plugin will use locale of the server, which might not be expected.</p>"},{"location":"features/","title":"Features","text":""},{"location":"features/#tags","title":"Tags","text":"<p>This feature enables you to set tags for articles, which can be used to group them into different topics.</p> <p></p>"},{"location":"features/#setup","title":"Setup","text":"<p>First, enable <code>tags</code> in the <code>features</code> entry of the configuration. Note that it is a dict, so by default (with no customize options), you should provide an empty dict <code>{}</code>:</p> mkdocs.yml<pre><code>features:\ntags: {}\n</code></pre> <p>And, in any article to be tagged (including those not in the designated blog collection), add any number of tags in the meta section:</p> article<pre><code>---\ntags:\n  - mkdocs\n  - blogging\n---\n</code></pre> <p>Now, if you are not using customized templates, the tags will be displayed on the blog entries.</p> <p>For those who use a customized template, you need a little extra work to get there. In the place you want to insert the tags of a page, insert following content, where <code>page</code> should be replaced by your naming of the variable, if necessary:</p> template<pre><code>{% if show_tags and \"tags\" in page.meta %}\n{% call render_tags(page.meta[\"tags\"], index_url) %}\n{% endcall %}\n{% endif %}\n</code></pre>"},{"location":"features/#get-an-index-page","title":"Get an index page","text":"<p>Additionally, you can create an index page for all the tags and associated entries out of the box. Just like the blog content, add <code>{{ tag_content }}</code> in your desired position, and an index page will be there for you.</p> tags index page<pre><code># Tags\n\n{{ tag_content }}\n</code></pre> <p></p> <p>Although you can insert the \"index\" page in multiple pages, it is recommended to specify a single index page, so that we can navigate the viewer to that page when they click on the tags. To achieve this, set <code>index_page</code> with the relative path of one of the page with <code>{{ tag_content }}</code>:</p> mkdocs.yml<pre><code>features:\ntags:\nindex_page: tags.md\n</code></pre>"},{"location":"features/#insert-tags-in-articles","title":"Insert tags in articles","text":"<p>You can display the tags of the article inside it if you like. Set <code>insert</code> to <code>top</code> or <code>bottom</code>, to add the tags to the top or bottom of all articles with at least one tag.</p> mkdocs.yml<pre><code>features:\ntags:\ninsert: top\n</code></pre> <p></p> <p>Best practices</p> <p>rather than using Header 1 in the markdown, set the title in the meta section:</p> article<pre><code>---\ntitle: Lorem ipsum dolor sit amet\n---\n</code></pre> <p>With this, the tags will be correctly displayed below the header, rather than above it.</p>"},{"location":"migration/","title":"Migration Guide","text":""},{"location":"migration/#v02x-to-v03x","title":"v0.2.x to v0.3.x","text":"<p>Breaking changes:</p> <ul> <li>Added a new paramter <code>page</code> to <code>render_blog</code>.<ul> <li>Effect: This will stop previous macro definitions from working.</li> <li>Workaround: Add a trailing parameter <code>page</code> to the marco.</li> </ul> </li> <li>Introduced new reserved template file names: <code>blog-*-theme.html</code>. <ul> <li>Effect: If you have templates using these names, they might stop working now or in the future.</li> <li>Workaround: Rename them if your existing names of your templates have this pattern.</li> </ul> </li> </ul>"},{"location":"migration/#v03x-to-v10x","title":"v0.3.x to v1.0.x","text":"<p>Breaking changes:</p> <ul> <li>Introduced new reserved template file names: <code>blog-*.html</code>. <ul> <li>Effect: If you have templates using these names, they might stop working now or in the future.</li> <li>Workaround: Rename them if your existing names of your templates have this pattern.</li> </ul> </li> </ul>"},{"location":"migration/#to-v140","title":"To v1.4.0","text":"<p>Breaking changes:</p> <ul> <li>Change post display behaviour when paging is disabled. <ul> <li>Effect: Posts will be truncated if <code>paging = false</code> and <code>size</code> co-exist.</li> <li>Workaround: If you need to keep all posts when paging is disabled, remove <code>size</code>.</li> </ul> </li> </ul>"},{"location":"template/","title":"Template","text":"<p>The <code>template</code> entry in the category settings allows you to override the appearance of the blog page.</p> <p>To customize the appearance, create an HTML template with name other than <code>blog.html</code> and <code>blog-*.html</code>, then provide the path relative to the parent directory of <code>mkdocs.yml</code> to the plugin's configuration.</p> <p>For introduction and usage of HTML templates, refer to jinja's documentation.</p> <p>You have following customization options:</p>"},{"location":"template/#partial-customization","title":"Partial Customization","text":"<p>You can override how the plugin render a single blog entry through this method. An example can be found here.</p>"},{"location":"template/#customize-html","title":"Customize HTML","text":"<p>In your template, import the original template. The template can be the basic <code>blog.html</code>, or one of the built-in themes, like <code>blog-card-theme.html</code>:</p> template<pre><code>{% extends \"blog.html\" %}\n</code></pre> <p>Then, define a macro named <code>render_blog</code> with parameters <code>title</code>, <code>description</code>, <code>time</code>, <code>url</code>, <code>page</code>, which returns HTML elements that represent a single blog entry. Please note that <code>{{ caller() }}</code> must be present somewhere inside the macro, though it has no use here.</p> template<pre><code>{% macro render_blog(title, description, time, url, page) -%}\n&lt;a href=\"{{ url }}\"&gt;\n    &lt;h3&gt;{{ title }}&lt;/h3&gt;\n&lt;/a&gt;\n&lt;div&gt;{{ description }}&lt;/div&gt;\n&lt;div&gt;{{ time }}&lt;/div&gt;\n&lt;hr/&gt;\n{{ caller() }}\n{%- endmacro %}\n</code></pre> <p>The parameter <code>page</code> allows you to add arbitary additional information to any page using its <code>meta</code> attribute. For example, to show the author's name on the blog page, add an entry <code>author</code> in the markdown file's meta section:</p> article<pre><code>---\nauthor: Liang Yesheng\n---\n</code></pre> <p>Then, access it through <code>page.meta</code>:</p> template<pre><code>{% if \"author\" in page.meta %}\n&lt;div&gt;{{ page.meta[\"author\"] }}&lt;/div&gt;\n{% endif %}\n</code></pre> <p>and it will display the author.</p>"},{"location":"template/#customize-styles","title":"Customize styles","text":"<p>Further more, if you want to customize the css, write a block named <code>style</code>. Call <code>{{ super() }}</code> first if you want to preserve the original styles.</p> template<pre><code>{% block style %}\n{{ super() }}\n    &lt;style&gt;\n{# your style goes here #}\n    &lt;/style&gt;\n{% endblock %}\n</code></pre> <p>Check the original template for available customization points. Here are some common ones:</p> <ul> <li><code>.md-typeset .blog-post-title</code>: post title</li> <li><code>.md-typeset .blog-post-description</code>: post description</li> <li><code>.md-typeset .blog-post-extra</code>: extra section for creation / revision time</li> </ul>"},{"location":"template/#global-override","title":"Global Override","text":"<p>Alternatively, you can provide a template that works completely independent from the original template.</p> <p>These variables are available inside your template:</p> <ul> <li><code>pages</code>: sorted blog pages, see mkdocs' documentation for available attributes</li> <li><code>page_size</code>: number of articles on a single page</li> <li><code>is_revision</code>: <code>True</code> if sorted by revision time, <code>False</code> if by creation time</li> <li><code>show_total</code>: whether to show the total number of the blog</li> </ul> <p>You can refer to the original template for help.</p>"},{"location":"template/#access-to-the-original-mkdocs-template-variables","title":"Access to the Original MkDocs Template Variables","text":"<p>Use <code>mkdocs_context</code> inside your template to access variables that are available inside MkDocs' templates. For example, to access <code>config.site_url</code>:</p> <pre><code>&lt;img src=\"{{ mkdocs_context.config.site_url }}/img/1.png\" alt=\"\"&gt;\n</code></pre>"},{"location":"theme/","title":"Theme","text":"<p>You can select one from the plugin's built-in themes to render your content. If you are to use one of them, in the plugin's config, specify the theme's name, and optionally specify some options to customize the appearance.</p> <p>Note that this is a category-specific setting, so you should set them for each category seperately.</p> mkdocs.yml<pre><code>plugins:\n- blogging:\ntheme:\nname: &lt;theme name&gt;\noptions:\n&lt;theme options&gt;\n</code></pre> <p>You can use one of the predefined themes:</p>"},{"location":"theme/#card","title":"Card","text":"<p>Display the blog entries as cards with hover effects.</p> mkdocs.yml<pre><code>plugins:\n- blogging:\ntheme:\nname: card\n</code></pre> <p></p>"},{"location":"theme/#button","title":"Button","text":"<p>Add \"Continue Reading\" button.</p> mkdocs.yml<pre><code>plugins:\n- blogging:\ntheme:\nname: button\noptions: # Optional\n# `true` if display the button as plain text\n# `false` or not present if display as rectangle button\nplain_button: true\n# Replacement for 'Continue Reading'\nlabel: Read\n</code></pre> <p></p>"}]}